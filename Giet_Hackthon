import cv2
import mediapipe as mp
import os
import numpy as np
import time
import math  

# Initialize MediaPipe Pose and Hands
mp_pose = mp.solutions.pose
pose = mp_pose.Pose()
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(min_detection_confidence=0.7, min_tracking_confidence=0.7)
mp_drawing = mp.solutions.drawing_utils

# Load video feed
cap = cv2.VideoCapture(0)

# Load shirt images
shirt_folder = r"C:\Users\Asus\OneDrive\Desktop\ShirtTryOn\Resources\Shirts"
shirt_list = [os.path.join(shirt_folder, img) for img in os.listdir(shirt_folder) if img.endswith(('.png', '.jpg'))]
shirt_index = 0  

# Perfect distance range (for frame color change)
min_perfect_distance = 0.18  
max_perfect_distance = 0.24  

# Time tracker for changing dress
last_change_time = time.time()

# Function to overlay transparent images
def overlay_transparent(background, overlay, x, y):
    if overlay is None or background is None:
        return background

    h, w, c = overlay.shape
    if c < 4:
        return background  

    overlay_rgb = overlay[:, :, :3]
    mask = overlay[:, :, 3] / 255.0  

    x_end = min(x + w, background.shape[1])
    y_end = min(y + h, background.shape[0])
    x = max(0, x)
    y = max(0, y)

    if x_end <= x or y_end <= y:
        return background

    roi = background[y:y_end, x:x_end]
    overlay_resized = overlay_rgb[: y_end - y, : x_end - x]
    mask_resized = mask[: y_end - y, : x_end - x]

    for c in range(3):
        roi[:, :, c] = roi[:, :, c] * (1 - mask_resized) + overlay_resized[:, :, c] * mask_resized

    background[y:y_end, x:x_end] = roi
    return background

# Process video frames
while cap.isOpened():
    success, frame = cap.read()
    if not success:
        break

    img_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    
    # Pose Detection
    results_pose = pose.process(img_rgb)
    results_hands = hands.process(img_rgb)

    body_size = "Unknown"
    frame_color = (0, 0, 255)  # Default: Red (Too Close/Far)

    if results_pose.pose_landmarks:
        landmarks = results_pose.pose_landmarks.landmark
        left_shoulder = landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER]
        right_shoulder = landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER]
        left_hip = landmarks[mp_pose.PoseLandmark.LEFT_HIP]
        right_hip = landmarks[mp_pose.PoseLandmark.RIGHT_HIP]

        # Convert to pixel coordinates
        shoulder_x1 = int(left_shoulder.x * frame.shape[1])
        shoulder_x2 = int(right_shoulder.x * frame.shape[1])
        shoulder_y = int((left_shoulder.y + right_shoulder.y) / 2 * frame.shape[0])
        hip_y = int((left_hip.y + right_hip.y) / 2 * frame.shape[0])

        # Calculate shoulder width
        frame_width = frame.shape[1]  
        shoulder_width = abs(shoulder_x2 - shoulder_x1)

        # **Determine body size based on shoulder width**
        if shoulder_width < frame_width * 0.15:
            body_size = "S"
        elif frame_width * 0.15 <= shoulder_width < frame_width * 0.22:
            body_size = "M"
        elif frame_width * 0.22 <= shoulder_width < frame_width * 0.28:
            body_size = "L"
        elif frame_width * 0.28 <= shoulder_width < frame_width * 0.34:
            body_size = "XL"
        elif frame_width * 0.34 <= shoulder_width < frame_width * 0.40:
            body_size = "XXL"
        else:
            body_size = "XXXL"

        # **Distance estimation (based on shoulder width)**
        shoulder_norm = abs(left_shoulder.x - right_shoulder.x)
        if min_perfect_distance <= shoulder_norm <= max_perfect_distance:
            frame_color = (0, 255, 0)  # Green for perfect distance

        # **Shirt positioning**
        shirt_width = shoulder_width + 50  
        shirt_height = abs(hip_y - shoulder_y) + 80  
        shirt_x = (shoulder_x1 + shoulder_x2) // 2 - (shirt_width // 2)
        shirt_y = shoulder_y - 20  

        # Load and overlay shirt
        shirt = cv2.imread(shirt_list[shirt_index], cv2.IMREAD_UNCHANGED)
        if shirt is not None:
            shirt_resized = cv2.resize(shirt, (shirt_width, shirt_height))
            frame = overlay_transparent(frame, shirt_resized, shirt_x, shirt_y)

    # **Hand detection for pinch gesture**
    if results_hands.multi_hand_landmarks:
        for hand_landmarks in results_hands.multi_hand_landmarks:
            # Get index finger tip and thumb tip coordinates
            index_finger_x = int(hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP].x * frame.shape[1])
            index_finger_y = int(hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP].y * frame.shape[0])
            thumb_x = int(hand_landmarks.landmark[mp_hands.HandLandmark.THUMB_TIP].x * frame.shape[1])
            thumb_y = int(hand_landmarks.landmark[mp_hands.HandLandmark.THUMB_TIP].y * frame.shape[0])

            # **Calculate Euclidean distance between index finger tip and thumb tip**
            pinch_distance = math.sqrt((index_finger_x - thumb_x) ** 2 + (index_finger_y - thumb_y) ** 2)

            # **Threshold for pinch detection**
            pinch_threshold = 40  # Adjust this value based on testing

            # **Change shirt on pinch**
            if pinch_distance < pinch_threshold and (time.time() - last_change_time) > 1:  # 1 sec delay
                shirt_index = (shirt_index + 1) % len(shirt_list)  # Change shirt
                last_change_time = time.time()  # Update last change time

    # **Draw dynamic frame based on distance**
    cv2.rectangle(frame, (100, 100), (frame.shape[1] - 100, frame.shape[0] - 100), frame_color, 4)
    cv2.putText(frame, "Perfect Distance!" if frame_color == (0, 255, 0) else "Move Closer/Farther", 
                (120, 80), cv2.FONT_HERSHEY_SIMPLEX, 1, frame_color, 3, cv2.LINE_AA)

    # **Display size detection**
    cv2.putText(frame, f"Size: {body_size}", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1.5, (0, 255, 0), 3, cv2.LINE_AA)
    cv2.putText(frame, "Pinch to change dress!", (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 1.2, (255, 255, 0), 3, cv2.LINE_AA)

    # Show the frame
    cv2.imshow("Virtual Try-On (Video)", frame)

    if cv2.waitKey(30) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
